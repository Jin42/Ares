<project name="Ares" default="rebuild">

  <property name="configuration" value="Release"/>
  <property name="nant.settings.currentframework" value="net-3.5" />
  <property name="xbuild" value="C:\Program Files (x86)\MonoDevelop\bin\mdtool.exe" />
  <property name="monoConfiguration" value="Mono_Release"/>
	
	<property name="build.dir" value="build" />
	<property name="temp.dir" value="${build.dir}/temp" />
	<property name="output.dir" value="${build.dir}/Ares/Player_Editor" />
	<property name="monooutput.dir" value="${build.dir}/Ares/Player" />
	<property name="libraries.dir" value="Libraries" />
	
    <target name="clean" description="Delete all previously compiled binaries.">
        <delete>
            <fileset>
                <include name="bin/**" />
                <include name="**/obj/**" />
				<exclude name="**/bass.dll" />
				<exclude name="**/bass_fx.dll" />
            </fileset>
        </delete>
    </target>
    
    <property name="solutionFile" value="Ares.sln" />
	<property name="monoSolutionFile" value="Ares.MonoPlayer.sln" />
    
    <target name="build" description="Build all targets.">
	    
		<!--
	      <msbuild project="${solutionFile}" >
	        <property name="Configuration" value="${configuration}" />
	      </msbuild>
		  -->
		  
        <exec program="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe"         
			        commandline="${solutionFile} /t:Build /p:Configuration=${configuration} /v:q" workingdir="." 
			        />
					
		<property name="expected.output" value="bin/${configuration}" />
        <property name="Ares.Player" value="${expected.output}/Ares.Player.exe" />
        <property name="Ares.Editor" value="${expected.output}/Ares.Editor.exe" />
        <fail unless="${file::exists(Ares.Player)}">Output file doesn't exist in ${expected.output}</fail>
        <fail unless="${file::exists(Ares.Editor)}">Output file doesn't exist in ${expected.output}</fail>
		
		<exec program="${xbuild}" commandline="build --target:build --configuration:${monoConfiguration} --project:Ares.Data_Mono ${monoSolutionFile}" workingdir="." />
		<exec program="${xbuild}" commandline="build --target:build --configuration:${monoConfiguration} --project:Ares.Settings_Mono ${monoSolutionFile}" workingdir="." />
		<exec program="${xbuild}" commandline="build --target:build --configuration:${monoConfiguration} --project:Ares.ModelInfo_Mono ${monoSolutionFile}" workingdir="." />
		<exec program="${xbuild}" commandline="build --target:build --configuration:${monoConfiguration} --project:Ares.Playing_Mono ${monoSolutionFile}" workingdir="." />
		<exec program="${xbuild}" commandline="build --target:build --configuration:${monoConfiguration} --project:Ares.Online_Mono ${monoSolutionFile}" workingdir="." />
		<exec program="${xbuild}" commandline="build --target:build --configuration:${monoConfiguration} --project:Ares.Players_Mono ${monoSolutionFile}" workingdir="." />
		<exec program="${xbuild}" commandline="build --target:build --configuration:${monoConfiguration} --project:Ares.Player_Mono ${monoSolutionFile}" workingdir="." />
		
		<property name="Ares.MonoPlayer" value="bin/Mono Release/Ares.Player.exe" />
		<fail unless="${file::exists(Ares.MonoPlayer)}">Output file doesn't exist in bin/Mono Release</fail>
    </target>
    
    <target name="rebuild" depends="clean, build" />

	<target name="prepareSetup" depends="build" >
	    <copy todir="${output.dir}">
		    <fileset basedir="bin/${configuration}">
			  <include name="**/*.dll" />
			  <include name="**/*.exe" />
			  <include name="**/*.config" />
			</fileset>
	    </copy>
		<copy todir="${monooutput.dir}">
		  <fileset basedir="bin/Mono Release">
			  <include name="**/*.dll" />
			  <include name="**/*.exe" />
			  <include name="**/*.config" />
   		  </fileset>
		</copy>
		<copy todir="${monooutput.dir}">
		  <fileset basedir="Libraries_Linux">
			  <include name="**/*.so" />
			  <include name="**/*.config" />
			  <include name="**/*.sh" />
			  <include name="**/*.png" />
   		  </fileset>
		</copy>
	    <copy todir="${output.dir}">
		    <fileset basedir=".">
			  <include name="*.ico" />
			  <include name="WeifenLuo.WinFormsUI.License.txt" />
			</fileset>
	    </copy>		
	    <copy todir="${output.dir}">
		    <fileset basedir="${libraries.dir}">
			  <include name="*.dll" />
			</fileset>
	    </copy>		
	    <copy todir="${build.dir}/Ares">
		    <fileset basedir=".">
			  <include name="*.txt" />
			  <exclude name="WeifenLuo.WinFormsUI.License.txt" />
			</fileset>
	    </copy>		
	</target>
   
</project>