<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ares.Data</name>
    </assembly>
    <members>
        <member name="T:Ares.Data.IElement">
            <summary>
            Basic interface for an audio element.
            </summary>
        </member>
        <member name="M:Ares.Data.IElement.Clone">
            <summary>
            Clones the element; makes a shallow copy for container elements.
            </summary>
        </member>
        <member name="P:Ares.Data.IElement.ID">
            <summary>
            Unique ID with which the element can be referenced.
            </summary>
        </member>
        <member name="P:Ares.Data.IElement.Title">
            <summary>
            Title of the element.
            </summary>
        </member>
        <member name="T:Ares.Data.IFileElement">
            <summary>
            An element consisting of a physical file.
            </summary>
        </member>
        <member name="P:Ares.Data.IFileElement.FileName">
            <summary>
            The name of the file.
            </summary>
        </member>
        <member name="P:Ares.Data.IFileElement.FilePath">
            <summary>
            The full path of the file.
            </summary>
        </member>
        <member name="T:Ares.Data.IRandomizedElement">
            <summary>
            An element which can be given a random chance to play.
            </summary>
        </member>
        <member name="P:Ares.Data.IRandomizedElement.RandomChance">
            <summary>
            The chance -- between 0 and 100, in percent.
            </summary>
        </member>
        <member name="T:Ares.Data.IDelayableElement">
            <summary>
            An element whose start can be delayed.
            </summary>
        </member>
        <member name="P:Ares.Data.IDelayableElement.FixedStartDelay">
            <summary>
            Fixed time to delay the element.
            </summary>
        </member>
        <member name="P:Ares.Data.IDelayableElement.MaximumRandomStartDelay">
            <summary>
            Maximum additional time to delay the element.
            </summary>
            <remarks>
            When playing, the element will be delayed by a random time between
            the minimum random delay and the maximum random delay.
            </remarks>
        </member>
        <member name="T:Ares.Data.IRepeatableElement">
            <summary>
            An element which can be repeated automatically.
            </summary>
        </member>
        <member name="P:Ares.Data.IRepeatableElement.Repeat">
            <summary>
            Whether the element shall be repeated.
            </summary>
        </member>
        <member name="P:Ares.Data.IRepeatableElement.FixedIntermediateDelay">
            <summary>
            Fixed delay before repeating the element.
            </summary>
        </member>
        <member name="P:Ares.Data.IRepeatableElement.MaximumRandomIntermediateDelay">
            <summary>
            Maximum additional time before repeating the element.
            </summary>
            <remarks>
            When playing, the repetition will be delayed by a random time between
            the minimum random delay and the maximum random delay.
            </remarks>
        </member>
        <member name="T:Ares.Data.IContainerElement">
            <summary>
            Tagging interface for the 'special' interface for elements in a container.
            </summary>
        </member>
        <member name="T:Ares.Data.IParallelElement">
            <summary>
            Base interface for an element in a parallel container. 
            Parallel elements can be randomized, delayed, and repeated.
            </summary>
        </member>
        <member name="T:Ares.Data.IChoiceElement">
            <summary>
            Base interface for an element in a choice container, e.g. a music playlist.
            Choice elements can be randomized, but not delayed or repeated.
            </summary>
        </member>
        <member name="T:Ares.Data.ISequentialElement">
            <summary>
            Base interface for an element in a sequential container.
            Sequential elements can be delayed, but not randomized or repeated.
            </summary>
        </member>
        <member name="T:Ares.Data.IElementContainer`1">
            <summary>
            Interface for a container.
            A container for choice elements could e.g. be a 'playlist'.
            A container for parallel elements could e.g. be a background for fighting.
            A container for sequential elements could e.g. be a special effect.
            </summary>
        </member>
        <member name="M:Ares.Data.IElementContainer`1.AddElement(Ares.Data.IElement)">
            <summary>
            Adds an element to the container.
            </summary>
        </member>
        <member name="M:Ares.Data.IElementContainer`1.RemoveElement(System.Int32)">
            <summary>
            Removes an element from the container. Has no effect if the element is not in the container.
            </summary>
        </member>
        <member name="M:Ares.Data.IElementContainer`1.GetElements">
            <summary>
            Returns a shallow copy of the elements in the container.
            </summary>
        </member>
        <member name="T:Ares.Data.TriggerType">
            <summary>
            Type of triggers which can start the playback of an element.
            </summary>
        </member>
        <member name="F:Ares.Data.TriggerType.Key">
            <summary>
            Triggered by a key press.
            </summary>
        </member>
        <member name="F:Ares.Data.TriggerType.ElementFinished">
            <summary>
            Triggered by an another element which has finished playing.
            </summary>
        </member>
        <member name="T:Ares.Data.ITrigger">
            <summary>
            A trigger for a playback of an element
            </summary>
        </member>
        <member name="P:Ares.Data.ITrigger.TriggerType">
            <summary>
            The type of the trigger
            </summary>
        </member>
        <member name="P:Ares.Data.ITrigger.TargetElement">
            <summary>
            The element which is triggered
            </summary>
        </member>
        <member name="T:Ares.Data.IKeyTrigger">
            <summary>
            A trigger that reacts on a key press
            </summary>
        </member>
        <member name="P:Ares.Data.IKeyTrigger.KeyCode">
            <summary>
            Code of the key which triggers
            </summary>
        </member>
        <member name="T:Ares.Data.IElementFinishTrigger">
            <summary>
            A trigger that reacts on the finish of an element
            </summary>
        </member>
        <member name="P:Ares.Data.IElementFinishTrigger.ElementID">
            <summary>
            ID of the element which triggers
            </summary>
        </member>
        <member name="T:Ares.Data.IElementRepository">
            <summary>
            Repository for all elements.
            </summary>
        </member>
        <member name="M:Ares.Data.IElementRepository.GetElement(System.Int32)">
            <summary>
            Returns a specific element. Returns null if the element isn't found.
            </summary>
            <param name="ID">ID of the element.</param>
        </member>
        <member name="M:Ares.Data.IElementRepository.DeleteElement(System.Int32)">
            <summary>
            Removes an element from the repository. No effect if the element isn't found.
            </summary>
            <param name="ID">ID of the element.</param>
        </member>
        <member name="T:Ares.Data.IElementFactory">
            <summary>
            Interface for the factory which creates the elements.
            </summary>
        </member>
        <member name="M:Ares.Data.IElementFactory.CreateFileElement(System.String)">
            <summary>
            Creates a file element.
            </summary>
            <param name="filePath">The path to the file.</param>
        </member>
        <member name="M:Ares.Data.IElementFactory.CreateChoiceContainer(System.String)">
            <summary>
            Creates a choice container
            </summary>
        </member>
        <member name="M:Ares.Data.IElementFactory.CreateParallelContainer(System.String)">
            <summary>
            Creates a parallel container
            </summary>
        </member>
        <member name="M:Ares.Data.IElementFactory.CreateSequentialContainer(System.String)">
            <summary>
            Creates a sequential container
            </summary>
        </member>
        <member name="M:Ares.Data.IElementFactory.CreateKeyTrigger">
            <summary>
            Creates a key trigger
            </summary>
        </member>
        <member name="M:Ares.Data.IElementFactory.CreateElementFinishTrigger">
            <summary>
            Creates an element finish trigger
            </summary>
        </member>
        <member name="M:Ares.Data.IElementFactory.CreateRandomBackgroundMusicList(System.String)">
            <summary>
            Crates a random background music list
            </summary>
        </member>
        <member name="M:Ares.Data.IElementFactory.CreateSequentialBackgroundMusicList(System.String)">
            <summary>
            Creates a sequential background music list
            </summary>
        </member>
        <member name="M:Ares.Data.IElementFactory.CreateBackgroundSounds(System.String)">
            <summary>
            Creates a background sound library.
            </summary>
        </member>
        <member name="T:Ares.Data.DataModule">
            <summary>
            Provides access to the main objects of the data module, which are singletons.
            </summary>
        </member>
        <member name="P:Ares.Data.DataModule.ProjectManager">
            <summary>
            Returns the project manager.
            </summary>
        </member>
        <member name="P:Ares.Data.DataModule.ElementFactory">
            <summary>
            Returns the element factory.
            </summary>
        </member>
        <member name="P:Ares.Data.DataModule.ElementRepository">
            <summary>
            Returns the element repository.
            </summary>
        </member>
        <member name="T:Ares.Data.ICompositeElement">
            <summary>
            An element which contains several other elements.
            </summary>
        </member>
        <member name="M:Ares.Data.ICompositeElement.IsEndless">
            <summary>
            Returns whether the element will finish playing
            without an external trigger or whether it will
            play forever.
            </summary>
        </member>
        <member name="T:Ares.Data.IModeElement">
            <summary>
            A top-level element inside a mode which is triggered 
            externally.
            </summary>
        </member>
        <member name="P:Ares.Data.IModeElement.Trigger">
            <summary>
            The trigger for the element.
            </summary>
        </member>
        <member name="T:Ares.Data.IRandomBackgroundMusicList">
            <summary>
            A randomized background music list. 
            </summary>
            <remarks>
            The list may be repeatable, in which
            case, one song after the other is played, which is the normal mode. It may
            start delayed, but then the delay is only for the first song, not between the
            songs. The delay between the songs can be set through the IRepeatableElement 
            interface methods.
            </remarks>
        </member>
        <member name="T:Ares.Data.ISequentialBackgroundMusicList">
            <summary>
            A non-randomized background list.
            </summary>
            <remarks>
            The list may be repeatable, but that is not the default. Each element in the 
            list can be delayed, which means an interval between the songs.
            </remarks>
        </member>
        <member name="T:Ares.Data.IBackgroundSoundChoice">
            <summary>
            Element inside a background sound library. Each element, in addition to 
            its properties of being a parallel element, can contain a choice of 
            other elements.
            </summary>
        </member>
        <member name="T:Ares.Data.IBackgroundSounds">
            <summary>
            A background sounds library.
            </summary>
            <remarks>
            The background sounds library contains a list of parallel elements, and
            each of these in turn contains a list of choice elements.
            </remarks>
        </member>
        <member name="M:Ares.Data.IBackgroundSounds.AddElement(Ares.Data.IElement)">
            <summary>
            Adds an sound choice to the library.
            </summary>
        </member>
        <member name="M:Ares.Data.IBackgroundSounds.RemoveElement(System.Int32)">
            <summary>
            Removes a sound choice from the library.
            </summary>
        </member>
        <member name="M:Ares.Data.IBackgroundSounds.GetElements">
            <summary>
            Returns all sound choices in the library.
            </summary>
        </member>
        <member name="T:Ares.Data.IMode">
            <summary>
            A mode in the project.
            </summary>
        </member>
        <member name="M:Ares.Data.IMode.AddElement(Ares.Data.IModeElement)">
            <summary>
            Adds a top-level element to the mode.
            </summary>
        </member>
        <member name="M:Ares.Data.IMode.RemoveElement(Ares.Data.IModeElement)">
            <summary>
            Removes an element from the mode.
            </summary>
        </member>
        <member name="M:Ares.Data.IMode.GetElements">
            <summary>
            Returns all elements in the mode.
            </summary>
        </member>
        <member name="P:Ares.Data.IMode.Title">
            <summary>
            Title of the mode.
            </summary>
        </member>
        <member name="P:Ares.Data.IMode.KeyCode">
            <summary>
            Key which switches to the mode.
            </summary>
        </member>
        <member name="T:Ares.Data.IProject">
            <summary>
            Represents an ARES project.
            </summary>
        </member>
        <member name="M:Ares.Data.IProject.AddMode(System.String)">
            <summary>
            Adds a mode to the project.
            </summary>
        </member>
        <member name="M:Ares.Data.IProject.RemoveMode(Ares.Data.IMode)">
            <summary>
            Removes a mode from the project.
            </summary>
        </member>
        <member name="M:Ares.Data.IProject.GetModes">
            <summary>
            Returns all modes in the project.
            </summary>
        </member>
        <member name="P:Ares.Data.IProject.Title">
            <summary>
            Title of the project.
            </summary>
        </member>
        <member name="P:Ares.Data.IProject.FileName">
            <summary>
            File where the project is stored.
            </summary>
        </member>
        <member name="P:Ares.Data.IProject.Changed">
            <summary>
            Whether the project has unsaved changes.
            </summary>
        </member>
        <member name="T:Ares.Data.IProjectManager">
            <summary>
            Management of ARES projects.
            </summary>
        </member>
        <member name="M:Ares.Data.IProjectManager.CreateProject(System.String)">
            <summary>
            Creates a new project.
            </summary>
        </member>
        <member name="M:Ares.Data.IProjectManager.LoadProject(System.String)">
            <summary>
            Loads a project from a file.
            </summary>
        </member>
        <member name="M:Ares.Data.IProjectManager.SaveProject">
            <summary>
            Saves a project. The file name must already be set.
            </summary>
        </member>
        <member name="M:Ares.Data.IProjectManager.SaveProject(System.String)">
            <summary>
            Saves a project to a file.
            </summary>
        </member>
    </members>
</doc>
