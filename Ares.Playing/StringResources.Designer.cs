//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ares.Playing {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class StringResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal StringResources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Ares.Playing.StringResources", typeof(StringResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Could not load BASS AAC add-on library. Installation problem? ähnelt.
        /// </summary>
        internal static string BassAacLoadFail {
            get {
                return ResourceManager.GetString("BassAacLoadFail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Device already initialized. ähnelt.
        /// </summary>
        internal static string BassDeviceAlready {
            get {
                return ResourceManager.GetString("BassDeviceAlready", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No device driver available. Are soundcard and speakers installed properly? Is the device in use by another application? ähnelt.
        /// </summary>
        internal static string BassDeviceDriver {
            get {
                return ResourceManager.GetString("BassDeviceDriver", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sound device doesn&apos;t support 44kHz sampling. ähnelt.
        /// </summary>
        internal static string BassDeviceFormat {
            get {
                return ResourceManager.GetString("BassDeviceFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Device: {0}, Driver: {1}, State: {2} ähnelt.
        /// </summary>
        internal static string BassDeviceInfo {
            get {
                return ResourceManager.GetString("BassDeviceInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Invalid device. Are soundcard and speakers installed properly? ähnelt.
        /// </summary>
        internal static string BassDeviceInvalid {
            get {
                return ResourceManager.GetString("BassDeviceInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Could not load BASS Flac add-on library. Installation problem? ähnelt.
        /// </summary>
        internal static string BassFlacLoadFail {
            get {
                return ResourceManager.GetString("BassFlacLoadFail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Could not load BASS Fx add-on library. Installation problem? ähnelt.
        /// </summary>
        internal static string BassFxLoadFail {
            get {
                return ResourceManager.GetString("BassFxLoadFail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Fatal: Couldn&apos;t initialize BASS engine!
        ///Error message: {0}
        ///{1} ähnelt.
        /// </summary>
        internal static string BassInitFail {
            get {
                return ResourceManager.GetString("BassInitFail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Could not load BASS library. Installation problem? ähnelt.
        /// </summary>
        internal static string BassLoadFail {
            get {
                return ResourceManager.GetString("BassLoadFail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The device has no 3D support. ähnelt.
        /// </summary>
        internal static string BassNo3D {
            get {
                return ResourceManager.GetString("BassNo3D", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die There is insufficient memory. ähnelt.
        /// </summary>
        internal static string BassNoMem {
            get {
                return ResourceManager.GetString("BassNoMem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Could not load BASS Opus add-on library. Installation problem? ähnelt.
        /// </summary>
        internal static string BassOpusLoadFail {
            get {
                return ResourceManager.GetString("BassOpusLoadFail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Unknown error. Are soundcard and speakers installed properly? ähnelt.
        /// </summary>
        internal static string BassUnknown {
            get {
                return ResourceManager.GetString("BassUnknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sample buffer was lost ähnelt.
        /// </summary>
        internal static string BufLostError {
            get {
                return ResourceManager.GetString("BufLostError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Unavailable codec ähnelt.
        /// </summary>
        internal static string CodecError {
            get {
                return ResourceManager.GetString("CodecError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Couldn&apos;t create the file ähnelt.
        /// </summary>
        internal static string CreateError {
            get {
                return ResourceManager.GetString("CreateError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Default ähnelt.
        /// </summary>
        internal static string Default {
            get {
                return ResourceManager.GetString("Default", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die disabled ähnelt.
        /// </summary>
        internal static string DeviceDisabled {
            get {
                return ResourceManager.GetString("DeviceDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die enabled ähnelt.
        /// </summary>
        internal static string DeviceEnabled {
            get {
                return ResourceManager.GetString("DeviceEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Illegal device number ähnelt.
        /// </summary>
        internal static string DeviceError {
            get {
                return ResourceManager.GetString("DeviceError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Can&apos;t find a driver ähnelt.
        /// </summary>
        internal static string DriverError {
            get {
                return ResourceManager.GetString("DriverError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No sufficient DirectX version installed ähnelt.
        /// </summary>
        internal static string DxError {
            get {
                return ResourceManager.GetString("DxError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Encoder &apos;{0}&apos; not found ähnelt.
        /// </summary>
        internal static string EncoderNotFound {
            get {
                return ResourceManager.GetString("EncoderNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Channel / file has ended ähnelt.
        /// </summary>
        internal static string EndedError {
            get {
                return ResourceManager.GetString("EndedError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Unsupported file format ähnelt.
        /// </summary>
        internal static string FileformError {
            get {
                return ResourceManager.GetString("FileformError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Can&apos;t open the file ähnelt.
        /// </summary>
        internal static string FileOpenError {
            get {
                return ResourceManager.GetString("FileOpenError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Error playing the file: {0} ähnelt.
        /// </summary>
        internal static string FilePlayingError {
            get {
                return ResourceManager.GetString("FilePlayingError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Unsupported sample format ähnelt.
        /// </summary>
        internal static string FormatError {
            get {
                return ResourceManager.GetString("FormatError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Illegal sample rate ähnelt.
        /// </summary>
        internal static string FreqError {
            get {
                return ResourceManager.GetString("FreqError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Invalid handle ähnelt.
        /// </summary>
        internal static string HandleError {
            get {
                return ResourceManager.GetString("HandleError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Illegal parameter specified ähnelt.
        /// </summary>
        internal static string IllParamError {
            get {
                return ResourceManager.GetString("IllParamError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Illegal type specified ähnelt.
        /// </summary>
        internal static string IllTypeError {
            get {
                return ResourceManager.GetString("IllTypeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Memory error ähnelt.
        /// </summary>
        internal static string MemError {
            get {
                return ResourceManager.GetString("MemError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No 3D support ähnelt.
        /// </summary>
        internal static string No3DError {
            get {
                return ResourceManager.GetString("No3DError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Can&apos;t get a free channel ähnelt.
        /// </summary>
        internal static string NoChanError {
            get {
                return ResourceManager.GetString("NoChanError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No sound device found. ähnelt.
        /// </summary>
        internal static string NoDevice {
            get {
                return ResourceManager.GetString("NoDevice", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No sound device driver found. ähnelt.
        /// </summary>
        internal static string NoDeviceDriver {
            get {
                return ResourceManager.GetString("NoDeviceDriver", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No EAX support ähnelt.
        /// </summary>
        internal static string NoEaxError {
            get {
                return ResourceManager.GetString("NoEaxError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Effects are not available ähnelt.
        /// </summary>
        internal static string NoFxError {
            get {
                return ResourceManager.GetString("NoFxError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No hardware voices available ähnelt.
        /// </summary>
        internal static string NoHwError {
            get {
                return ResourceManager.GetString("NoHwError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Not playing ähnelt.
        /// </summary>
        internal static string NoPlayError {
            get {
                return ResourceManager.GetString("NoPlayError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Not an audio track ähnelt.
        /// </summary>
        internal static string NotAudioError {
            get {
                return ResourceManager.GetString("NotAudioError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The stream is not a file stream ähnelt.
        /// </summary>
        internal static string NotFileError {
            get {
                return ResourceManager.GetString("NotFileError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The channel is playing ähnelt.
        /// </summary>
        internal static string PlayingError {
            get {
                return ResourceManager.GetString("PlayingError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Invalid playback position ähnelt.
        /// </summary>
        internal static string PositionError {
            get {
                return ResourceManager.GetString("PositionError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Error setting an effect: {0} ähnelt.
        /// </summary>
        internal static string SetEffectError {
            get {
                return ResourceManager.GetString("SetEffectError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Error setting the volume: {0} ähnelt.
        /// </summary>
        internal static string SetVolumeError {
            get {
                return ResourceManager.GetString("SetVolumeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Unavailable speaker, or file is stereo. ähnelt.
        /// </summary>
        internal static string SpeakerError {
            get {
                return ResourceManager.GetString("SpeakerError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The configured speaker is not available. ähnelt.
        /// </summary>
        internal static string SpeakerNotAvailable {
            get {
                return ResourceManager.GetString("SpeakerNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Streaming error: {0} ähnelt.
        /// </summary>
        internal static string StreamingError {
            get {
                return ResourceManager.GetString("StreamingError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tagged Music ähnelt.
        /// </summary>
        internal static string TaggedMusic {
            get {
                return ResourceManager.GetString("TaggedMusic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Error accessing tags database:
        ///{0} ähnelt.
        /// </summary>
        internal static string TagsDbError {
            get {
                return ResourceManager.GetString("TagsDbError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Unexpected error: {0} ähnelt.
        /// </summary>
        internal static string UnexpectedError {
            get {
                return ResourceManager.GetString("UnexpectedError", resourceCulture);
            }
        }
    }
}
